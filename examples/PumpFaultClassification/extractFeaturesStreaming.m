function featureTable = extractFeaturesStreaming(inputData)
%DIAGNOSTICFEATURES recreates results in Diagnostic Feature Designer.
%
% Input:
%  inputData: A timetable.
%
% Output:
%  featureTable: A table containing all features.
%
% This function computes features:
%  flow_stats/Data_ClearanceFactor
%  flow_stats/Data_CrestFactor
%  flow_stats/Data_ImpulseFactor
%  flow_stats/Data_Mean
%  flow_stats/Data_RMS
%  flow_stats/Data_THD
%  pressure_stats/Data_CrestFactor
%  pressure_stats/Data_ImpulseFactor
%  pressure_stats/Data_Mean
%  pressure_stats/Data_RMS
%  pressure_stats/Data_THD
%
% Organization of the function:
% 1. Compute signals/spectra/features
% 2. Extract computed features into a table
%
% Modify the function to add or remove data processing, feature generation
% or ranking operations.

% Auto-generated by MATLAB on 09-May-2023 13:21:14

% Initialize feature table.
featureTable = table;

% Get all input variables.
flow = table(inputData.Time,inputData.flow,'VariableNames',{'Time','Data'});
pressure = table(inputData.Time,inputData.pressure,'VariableNames',{'Time','Data'});

%% SignalFeatures
% Compute signal features.
inputSignal = flow.Data;
Data_ClearanceFactor = max(abs(inputSignal))/(mean(sqrt(abs(inputSignal)))^2);
Data_CrestFactor = peak2rms(inputSignal);
Data_ImpulseFactor = max(abs(inputSignal))/mean(abs(inputSignal));
Data_Mean = mean(inputSignal,'omitnan');
Data_RMS = rms(inputSignal,'omitnan');
Data_THD = thd(inputSignal);

% Concatenate signal features.
featureValues = [Data_ClearanceFactor,Data_CrestFactor,Data_ImpulseFactor,Data_Mean,Data_RMS,Data_THD];

% Package computed features into a table.
featureNames = {'Data_ClearanceFactor','Data_CrestFactor','Data_ImpulseFactor','Data_Mean','Data_RMS','Data_THD'};
flow_stats = array2table(featureValues,'VariableNames',featureNames);

% Append computed features to featureTable.
newFeatureNames = cell(1, numel(featureNames));
for ct = 1:numel(featureNames)
    newFeatureNames{ct} = ['flow_stats/' featureNames{ct}];
end
flow_stats = renamevars(flow_stats, featureNames, newFeatureNames);
featureTable = [featureTable, flow_stats];

%% SignalFeatures
% Compute signal features.
inputSignal = pressure.Data;
Data_CrestFactor = peak2rms(inputSignal);
Data_ImpulseFactor = max(abs(inputSignal))/mean(abs(inputSignal));
Data_Mean = mean(inputSignal,'omitnan');
Data_RMS = rms(inputSignal,'omitnan');
Data_THD = thd(inputSignal);

% Concatenate signal features.
featureValues = [Data_CrestFactor,Data_ImpulseFactor,Data_Mean,Data_RMS,Data_THD];

% Package computed features into a table.
featureNames = {'Data_CrestFactor','Data_ImpulseFactor','Data_Mean','Data_RMS','Data_THD'};
pressure_stats = array2table(featureValues,'VariableNames',featureNames);

% Append computed features to featureTable.
newFeatureNames = cell(1, numel(featureNames));
for ct = 1:numel(featureNames)
    newFeatureNames{ct} = ['pressure_stats/' featureNames{ct}];
end
pressure_stats = renamevars(pressure_stats, featureNames, newFeatureNames);
featureTable = [featureTable, pressure_stats];

end
